{
  "name": "confusing-browser-globals",
  "version": "1.0.11",
  "description": "A list of browser globals that are often used by mistake instead of local variables",
  "license": "MIT",
  "main": "index.js",
  "scripts": {
    "test": "jest"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/facebook/create-react-app.git",
    "directory": "packages/confusing-browser-globals"
  },
  "keywords": [
    "eslint",
    "globals"
  ],
  "files": [
    "index.js"
  ],
  "devDependencies": {
    "jest": "^27.4.3"
  },
  "gitHead": "221e511730ca51c036c6954a9d2ee7659ff860f9",
  "readme": "# confusing-browser-globals\n\nA curated list of browser globals that commonly cause confusion and are not recommended to use without an explicit `window.` qualifier.\n\n## Motivation\n\nSome global variables in browser are likely to be used by people without the intent of using them as globals, such as `status`, `name`, `event`, etc.\n\nFor example:\n\n```js\nhandleClick() { // missing `event` argument\n  this.setState({\n  \ttext: event.target.value // uses the `event` global: oops!\n  });\n}\n```\n\nThis package exports a list of globals that are often used by mistake. You can feed this list to a static analysis tool like ESLint to prevent their usage without an explicit `window.` qualifier.\n\n## Installation\n\n```sh\nnpm install --save confusing-browser-globals\n```\n\n## Usage\n\nIf you use Create React App, you don't need to configure anything, as this rule is already included in the default `eslint-config-react-app` preset.\n\nIf you maintain your own ESLint configuration, you can do this:\n\n```js\nconst restrictedGlobals = require('confusing-browser-globals');\n\nmodule.exports = {\n  rules: {\n    'no-restricted-globals': ['error'].concat(restrictedGlobals),\n  },\n};\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/facebook/create-react-app/issues"
  },
  "_id": "confusing-browser-globals@1.0.11",
  "_from": "confusing-browser-globals@^1.0.10"
}
